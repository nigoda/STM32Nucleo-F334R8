# Attempt 1

Question

Course End Project: Ambient Light Sensor Data Capture and Display over UART using FreeRTOS and Queue

 Project Description:

 The aim of this capstone project is to develop an embedded system that utilizes an ambient light sensor to capture light intensity data

 and display it over UART using FreeRTOS and a queue-based communication mechanism.

 The project will involve interfacing the ambient light sensor with a microcontroller,

 implementing a task to capture data and channel it to a queue, and another task to display the data received from the queue over UART communication.

Platform to be Used:

Software Requirements:

1)STM Cube IDE

2)FreeRTOS 

Hardware Requirements:

1)Arduino Sensor Kit 

2)STM Nucleo F334R8

3)Connecting Wires

4)USB Cables

 

Your Answers


/* USER CODE BEGIN Header */


/**


 ******************************************************************************


 * @file : main.c


 * @brief : Main program body


 ******************************************************************************


 * @attention


 *


 * Copyright (c) 2023 STMicroelectronics.


 * All rights reserved.


 *


 * This software is licensed under terms that can be found in the LICENSE file


 * in the root directory of this software component.


 * If no LICENSE file comes with this software, it is provided AS-IS.


 *


 ******************************************************************************


 */


/* USER CODE END Header */


/* Includes ------------------------------------------------------------------*/


#include "main.h"


 


/* Private includes ----------------------------------------------------------*/


/* USER CODE BEGIN Includes */


#include "FreeRTOS.h"


#include "task.h"


#include "queue.h"


#include <stdio.h>




#include "main.h"


#include "stm32f4xx_hal.h"


#include "i2c.h"


 


#define SENSOR_ADDR 0x28




 


/* USER CODE END Includes */


 


/* Private typedef -----------------------------------------------------------*/


/* USER CODE BEGIN PTD */


 


/* USER CODE END PTD */


 


/* Private define ------------------------------------------------------------*/


/* USER CODE BEGIN PD */


 


/* USER CODE END PD */


 


/* Private macro -------------------------------------------------------------*/


/* USER CODE BEGIN PM */


 


/* USER CODE END PM */


 


/* Private variables ---------------------------------------------------------*/




UART_HandleTypeDef huart2;


 




/* USER CODE BEGIN PV */


QueueHandle_t queue1;


TaskHandle_t task1;


TaskHandle_t task2;


 


/* USER CODE END PV */


 


/* Private function prototypes -----------------------------------------------*/


void SystemClock_Config(void);


static void MX_GPIO_Init(void);




static void MX_USART2_UART_Init(void);




/* USER CODE BEGIN PFP */


void Sender(void *ptr);


void UART_Display(void *ptr);


 


/* USER CODE END PFP */


 


/* Private user code ---------------------------------------------------------*/


/* USER CODE BEGIN 0 */




char ana_ser[5];


char ter='|';




/* USER CODE END 0 */


 


/**


 * @brief The application entry point.


 * @retval int


 */


int main(void)


{


/* USER CODE BEGIN 1 */


 


/* USER CODE END 1 */


 


/* MCU Configuration--------------------------------------------------------*/


 


/* Reset of all peripherals, Initializes the Flash interface and the Systick. */


HAL_Init();


 


/* USER CODE BEGIN Init */


 


/* USER CODE END Init */


 


/* Configure the system clock */


SystemClock_Config();


 


/* USER CODE BEGIN SysInit */


 


/* USER CODE END SysInit */


 


/* Initialize all configured peripherals */


MX_GPIO_Init();


MX_USART2_UART_Init();


// Initialize I2C




I2C_InitTypeDef I2C_InitStruct;


I2C_InitStruct.ClockSpeed = 100000;


I2C_InitStruct.DutyCycle = I2C_DUTYCYCLE_2;


I2C_InitStruct.OwnAddress1 = 0;


I2C_InitStruct.AddressingMode = I2C_ADDRESSINGMODE_7BIT;


I2C_InitStruct.DualAddressMode = I2C_DUALADDRESS_DISABLE;


I2C_InitStruct.OwnAddress2 = 0;


I2C_InitStruct.GeneralCallMode = I2C_GENERALCALL_DISABLE;


I2C_InitStruct.NoStretchMode = I2C_NOSTRETCH_DISABLE;


HAL_I2C_Init(&hi2c1, &I2C_InitStruct);


 




/* USER CODE BEGIN 2 */


queue1 = xQueueCreate(5,sizeof(int));


if(queue1 != NULL)


printf("Queue create successfully\r\n");


else


printf("Queue is not created\r\n");


 


xTaskCreate(Sender, "Send", 200, NULL, 3, &task1);


xTaskCreate(UART_Display, "UARTDisplay", 200, NULL, 2, &task2);


vTaskStartScheduler();


 


 


/* USER CODE END 2 */


 


/* Infinite loop */


/* USER CODE BEGIN WHILE */


while (1)


{


/* USER CODE END WHILE */


 


/* USER CODE BEGIN 3 */


}


/* USER CODE END 3 */


}


 


/**


 * @brief System Clock Configuration


 * @retval None


 */


void SystemClock_Config(void)


{


RCC_OscInitTypeDef RCC_OscInitStruct = {0};


RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};


 


/** Initializes the RCC Oscillators according to the specified parameters


 * in the RCC_OscInitTypeDef structure.


 */


RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;


RCC_OscInitStruct.HSIState = RCC_HSI_ON;


RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;


RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;


RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;


RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;


if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)


{


Error_Handler();


}


 


/** Initializes the CPU, AHB and APB buses clocks


 */


RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK


|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;


RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;


RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;


RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;


RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;


 


if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)


{


Error_Handler();


}


}


 


/**


 * @brief GPIO Initialization Function


 * @param None


 * @retval None


 */


static void MX_GPIO_Init(void)


{


GPIO_InitTypeDef GPIO_InitStruct = {0};


/* USER CODE BEGIN MX_GPIO_Init_1 */


/* USER CODE END MX_GPIO_Init_1 */


 


/* GPIO Ports Clock Enable */


__HAL_RCC_GPIOC_CLK_ENABLE();


__HAL_RCC_GPIOF_CLK_ENABLE();


__HAL_RCC_GPIOA_CLK_ENABLE();


__HAL_RCC_GPIOB_CLK_ENABLE();


 


/*Configure GPIO pin Output Level */


HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);


 


/*Configure GPIO pin : B1_Pin */


GPIO_InitStruct.Pin = B1_Pin;


GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;


GPIO_InitStruct.Pull = GPIO_NOPULL;


HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);


 


/*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */


GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;


GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;


GPIO_InitStruct.Pull = GPIO_NOPULL;


GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;


GPIO_InitStruct.Alternate = GPIO_AF7_USART2;


HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


 


/*Configure GPIO pin : LD2_Pin */


GPIO_InitStruct.Pin = LD2_Pin;


GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;


GPIO_InitStruct.Pull = GPIO_NOPULL;


GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;


HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);


 


/* USER CODE BEGIN MX_GPIO_Init_2 */


/* USER CODE END MX_GPIO_Init_2 */


}


 


/* USER CODE BEGIN 4 */


void Sender(void *ptr){


uint8_t data[2];


while(1)


{


// Read data from sensor




HAL_I2C_Master_Transmit(&hi2c1, SENSOR_ADDR, (uint8_t *)0x00, 1, HAL_MAX_DELAY);


HAL_I2C_Master_Receive(&hi2c1, SENSOR_ADDR, data, 2, HAL_MAX_DELAY);


 


// Convert data to light intensity


uint16_t lightIntensity = (data[0] << 8) | data[1];


lightIntensity = lightIntensity * 0.01;


 


 


 




if(xQueueSend(queue1,&lightIntensity,0) ==pdTRUE)


{


// Display light intensity


printf("Light intensity: %d lux\n", lightIntensity);


}


else


{


vTaskSuspend(task1);


printf("Queue is Full\r\n");


}


// Delay




vTaskDelay(1000);




}


}


 


void UART_Display(void *ptr){


 


while(1)


{


 


int Rdata;


 


if(xQueueReceive(queue1,&Rdata,portMAX_DELAY) == pdTRUE) // portMAX_DELAY = 1000 for multiple queue


{


HAL_UART_Transmit(&huart2,&Rdata,sizeof(Rdata),10);//HAL_UART_Transmit(&huart2,&analog,sizeof(analog),10);




HAL_UART_Transmit(&huart2,&ter,sizeof(ter),3);




printf("The received value is %d \r\n",Rdata);


}


else


{


printf("The data is not received\r\n");


vTaskResume(task1);


}


vTaskDelay(1000);


}


}


 


 


 


/* USER CODE END 4 */


 


/**


 * @brief Period elapsed callback in non blocking mode


 * @note This function is called when TIM6 interrupt took place, inside


 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment


 * a global variable "uwTick" used as application time base.


 * @param htim : TIM handle


 * @retval None


 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)


{


/* USER CODE BEGIN Callback 0 */


 


/* USER CODE END Callback 0 */


if (htim->Instance == TIM6) {


HAL_IncTick();


}


/* USER CODE BEGIN Callback 1 */


 


/* USER CODE END Callback 1 */


}


 


/**


 * @brief This function is executed in case of error occurrence.


 * @retval None


 */


void Error_Handler(void)


{


/* USER CODE BEGIN Error_Handler_Debug */


/* User can add his own implementation to report the HAL error return state */


__disable_irq();


while (1)


{


}


/* USER CODE END Error_Handler_Debug */


}


 


#ifdef USE_FULL_ASSERT


/**


 * @brief Reports the name of the source file and the source line number


 * where the assert_param error has occurred.


 * @param file: pointer to the source file name


 * @param line: assert_param error line source number


 * @retval None


 */


void assert_failed(uint8_t *file, uint32_t line)


{


/* USER CODE BEGIN 6 */


/* User can add his own implementation to report the file name and line number,


 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */


/* USER CODE END 6 */


}


#endif /* USE_FULL_ASSERT */

